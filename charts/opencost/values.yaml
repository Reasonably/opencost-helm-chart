# -- Overwrite the default name of the chart
nameOverride: ""
# -- Overwrite all resources name created by the chart
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # --  Annotations to add to the service account
  annotations: {}
  # eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/eksctl-opencost

  # -- Whether pods running as this service account should have an API token automatically mounted
  automountServiceAccountToken: true

# --  Annotations to add to the all the resources
annotations: {}
# --  Annotations to add to the OpenCost Pod
podAnnotations: {}
# --  Annotations to add to the Secret
secretAnnotations: {}
# --  Labels to add to the OpenCost Pod
podLabels: {}
# --  Pod priority
priorityClassName: null

# -- Holds pod-level security attributes and common container settings
podSecurityContext: {}
  # fsGroup: 2000

service:
  enabled: true
  # --  Annotations to add to the service
  annotations: {}
  # --  Labels to add to the service account
  labels: {}
  # --  Kubernetes Service type
  type: ClusterIP

# Create cluster role policies
rbac:
  enabled: true

opencost:
  exporter:
    # -- The GCP Pricing API requires a key. This is supplied just for evaluation.
    cloudProviderApiKey: ""
    # -- Default cluster ID to use if cluster_id is not set in Prometheus metrics.
    defaultClusterId: 'default-cluster'
    image:
      # -- Exporter container image registry
      registry: quay.io
      # -- Exporter container image name
      repository: kubecost1/kubecost-cost-model
      # -- Exporter container image tag
      # @default -- `""` (use appVersion in Chart.yaml)
      tag: ""
    # -- Number of OpenCost replicas to run
    replicas: 1
    resources:
      # -- CPU/Memory resource requests
      requests:
        cpu: '10m'
        memory: '55Mi'
      # -- CPU/Memory resource limits
      limits:
        cpu: '999m'
        memory: '1Gi'
    # -- Liveness probe configuration
    livenessProbe:
      # -- Whether probe is enabled
      enabled: true
      # -- Number of seconds before probe is initiated
      initialDelaySeconds: 30
      # -- Probe frequency in seconds
      periodSeconds: 10
      # -- Number of failures for probe to be considered failed
      failureThreshold: 200
    # -- Readiness probe configuration
    readinessProbe:
      # -- Whether probe is enabled
      enabled: true
      # -- Number of seconds before probe is initiated
      initialDelaySeconds: 30
      # -- Probe frequency in seconds
      periodSeconds: 10
      # -- Number of failures for probe to be considered failed
      failureThreshold: 200
    # -- The security options the container should be run with
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000

    # Path of CSV file
    csv_path: ""

    # Persistent volume claim for storing the data. eg: csv file
    persistence:
      enabled: false
      # -- Annotations for persistent volume
      annotations: {}
      # -- Access mode for persistent volume
      accessMode: ""
      # --Storage class for persistent volume
      storageClass: ""
      # -- Size for persistent volume
      size: ""

    aws:
      # -- AWS secret access key
      secret_access_key: ""
      # -- AWS secret key id
      access_key_id: ""
    # -- A list of volume mounts to be added to the pod
    extraVolumeMounts: []
    # -- Any extra environment variables you would like to pass on to the pod
    extraEnv: {}
      # FOO: BAR

  metrics:
    serviceMonitor:
      # -- Create ServiceMonitor resource for scraping metrics using PrometheusOperator
      enabled: false
      # -- Additional labels to add to the ServiceMonitor
      additionalLabels: {}
      # -- Specify if the ServiceMonitor will be deployed into a different namespace (blank deploys into same namespace as chart)
      namespace: ""
      # -- Interval at which metrics should be scraped
      scrapeInterval: 30s
      # -- HonorLabels chooses the metric's labels on collisions with target labels
      honorLabels: true
      # -- RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few standard Kubernetes fields
      relabelings: []
      # -- MetricRelabelConfigs to apply to samples before ingestion
      metricRelabelings: []

  prometheus:
    # -- Prometheus Basic auth username
    username: ""
    # -- Prometheus Basic auth password
    password: ""
    # -- Prometheus Bearer token
    bearer_token: ""
    external:
      # -- Use external Prometheus (eg. Grafana Cloud)
      enabled: false
      # -- External Prometheus url
      url: 'https://prometheus.example.com/prometheus'
    internal:
      # -- Use in-cluster Prometheus
      enabled: true
      # -- Service name of in-cluster Prometheus
      serviceName: my-prometheus
      # -- Namespace of in-cluster Prometheus
      namespaceName: opencost
      # -- Service port of in-cluster Prometheus
      port: 9090

  ui:
    # -- Enable OpenCost UI
    enabled: true
    image:
      # -- UI container image registry
      registry: quay.io
      # -- UI container image name
      repository: kubecost1/opencost-ui
      # -- UI container image tag
      # @default -- `""` (use appVersion in Chart.yaml)
      tag: ""
    resources:
      # -- CPU/Memory resource requests
      requests:
        cpu: '10m'
        memory: '55Mi'
      # -- CPU/Memory resource limits
      limits:
        cpu: '999m'
        memory: '1Gi'
    # -- Liveness probe configuration
    livenessProbe:
      # -- Whether probe is enabled
      enabled: true
      # -- Number of seconds before probe is initiated
      initialDelaySeconds: 30
      # -- Probe frequency in seconds
      periodSeconds: 10
      # -- Number of failures for probe to be considered failed
      failureThreshold: 200
    # -- Readiness probe configuration
    readinessProbe:
      # -- Whether probe is enabled
      enabled: true
      # -- Number of seconds before probe is initiated
      initialDelaySeconds: 30
      # -- Probe frequency in seconds
      periodSeconds: 10
      # -- Number of failures for probe to be considered failed
      failureThreshold: 200
    # -- The security options the container should be run with
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000

    # -- A list of volume mounts to be added to the pod
    extraVolumeMounts: []

    ingress:
      # -- Ingress for OpenCost UI
      enabled: false
      # -- Ingress controller which implements the resource
      ingressClassName: ""
      # -- Annotations for Ingress resource
      annotations: {}
        # kubernetes.io/tls-acme: "true"
      # -- A list of host rules used to configure the Ingress
      # @default -- See [values.yaml](values.yaml)
      hosts:
        - host: example.local
          paths:
            - /
      # -- Ingress TLS configuration
      tls: []
        #  - secretName: chart-example-tls
        #    hosts:
        #      - chart-example.local
  # -- Toleration labels for pod assignment
  tolerations: []
  # -- Node labels for pod assignment
  nodeSelector: {}
  # -- Affinity settings for pod assignment
  affinity: {}
  # -- Assign custom TopologySpreadConstraints rules
  topologySpreadConstraints: []


networkCosts:
  enabled: true
  podSecurityPolicy:
    enabled: false
  image: gcr.io/kubecost1/kubecost-network-costs:v0.16.6
  imagePullPolicy: Always
  updateStrategy:
    type: RollingUpdate
  # For existing Prometheus Installs, annotates the Service which generates Endpoints for each of the network-costs pods.
  # The Service is annotated with prometheus.io/scrape: "true" to automatically get picked up by the prometheus config.
  # NOTE: Setting this option to true and leaving the above extraScrapeConfig "job_name: kubecost-networking" configured will cause the
  # NOTE: pods to be scraped twice.
  prometheusScrape: false
  serviceMonitor:
    enabled: true
    scrapeTimeout: 10s
    additionalLabels: {}
    metricRelabelings: []
    relabelings: []
  # Traffic Logging will enable logging the top 5 destinations for each source
  # every 30 minutes.
  trafficLogging: true

  # Port will set both the containerPort and hostPort to this value.
  # These must be identical due to network-costs being run on hostNetwork
  port: 3001
  # this daemonset can use significant resources on large clusters: https://guide.kubecost.com/hc/en-us/articles/4407595973527-Network-Traffic-Cost-Allocation
  resources:
    limits: # remove the limits by setting limits: {}
      cpu: 500m # can be less, will depend on cluster size
      # memory: it is not recommended to set a memory limit
    requests:
     cpu: 50m
     memory: 20Mi
  extraArgs: []
  config:
    # Configuration for traffic destinations, including specific classification
    # for IPs and CIDR blocks. This configuration will act as an override to the
    # automatic classification provided by network-costs.
    destinations:
      # In Zone contains a list of address/range that will be
      # classified as in zone.
      in-zone:
        # Loopback Addresses in "IANA IPv4 Special-Purpose Address Registry"
        - "127.0.0.0/8"
        # IPv4 Link Local Address Space
        - "169.254.0.0/16"
        # Private Address Ranges in RFC-1918
        - "10.0.0.0/8" # Remove this entry if using Multi-AZ Kubernetes
        - "172.16.0.0/12"
        - "192.168.0.0/16"

      # In Region contains a list of address/range that will be
      # classified as in region. This is synonymous with cross
      # zone traffic, where the regions between source and destinations
      # are the same, but the zone is different.
      in-region: []

      # Cross Region contains a list of address/range that will be
      # classified as non-internet egress from one region to another.
      cross-region: []

      # Internet contains a list of address/range that will be
      # classified as internet traffic. This is synonymous with traffic
      # that cannot be classified within the cluster.
      # NOTE: Internet classification filters are executed _after_
      # NOTE: direct-classification, but before in-zone, in-region,
      # NOTE: and cross-region.
      internet: []

      # Direct Classification specifically maps an ip address or range
      # to a region (required) and/or zone (optional). This classification
      # takes priority over in-zone, in-region, and cross-region configurations.
      direct-classification: []
      # - region: "us-east1"
      #   zone: "us-east1-c"
      #   ips:
      #     - "10.0.0.0/24"
    services:
      # google-cloud-services: when set to true, enables labeling traffic metrics with google cloud
      # service endpoints
      google-cloud-services: false
      # amazon-web-services: when set to true, enables labeling traffic metrics with amazon web service
      # endpoints.
      amazon-web-services: false
      # azure-cloud-services: when set to true, enables labeling traffic metrics with azure cloud service
      # endpoints
      azure-cloud-services: false
      # user defined services provide a way to define custom service endpoints which will label traffic metrics
      # falling within the defined address range.
      #services:
      #  - service: "test-service-1"
      #    ips:
      #      - "19.1.1.2"
      #  - service: "test-service-2"
      #    ips:
      #      - "15.128.15.2"
      #      - "20.0.0.0/8"

  ## Node tolerations for server scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  tolerations: []
  #  - key: "key"
  #    operator: "Equal|Exists"
  #    value: "value"
  #    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  affinity: {}

  service:
    annotations: {}
    labels: {}

  ## PriorityClassName
  ## Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  ## PodMonitor
  ## Allows scraping of network metrics from a dedicated prometheus operator setup
  podMonitor:
    enabled: false
    additionalLabels: {}
  additionalLabels: {}
  nodeSelector: {}
  annotations: {}


# -- A list of volumes to be added to the pod
extraVolumes: []
